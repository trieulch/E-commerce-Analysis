-- FINAL PROJECTS
SELECT
		YEAR(website_sessions.created_at) AS `YEAR`,
        QUARTER(website_sessions.created_at) AS `MONTH`,
        COUNT(website_sessions.website_session_id) AS sessions,
        COUNT(orders.order_id) AS orders
        FROM website_sessions
        LEFT JOIN orders ON website_sessions.website_Session_id = orders.website_session_id
        WHERE YEAR(website_sessions.created_at) != 2015 AND QUARTER(website_sessions.created_at) != 1
        GROUP BY 1,2
        ORDER BY 1,2;
-- Both quarterly sessions and orders are picking up, session_to_order
SELECT
		YEAR(website_sessions.created_at) AS `YEAR`,
        QUARTER(website_sessions.created_at) AS `MONTH`,
        COUNT(orders.order_id)/COUNT(website_sessions.website_session_id) AS session_to_order,
        SUM(orders.price_usd)/COUNT(orders.order_id) AS revenue_per_order,
        SUM(orders.price_usd)/COUNT(website_sessions.website_session_id) AS revenue_per_session
        FROM website_sessions
        LEFT JOIN orders ON website_sessions.website_Session_id = orders.website_session_id
        WHERE YEAR(website_sessions.created_at) != 2015 AND QUARTER(website_sessions.created_at) != 1
        GROUP BY 1,2
        ORDER BY 1,2;
-- Quarterly session_to_order is picking up from 3.04% to 7.74% nearly 154% increasement.
-- Quarterly revenue_per_order is picking up from 49.9 to 63.7 nearly 28%
-- Quarterly revenue_per_session is picking up from 1.51 to 4.93 nearly 200% increasement

-- gsearch nonbrand,bsearch nonbrand, brand search overall,organic search,direct type-in


SELECT 
		CASE WHEN website_sessions.utm_source LIKE 'gsearch' AND website_sessions.utm_campaign LIKE 'nonbrand' THEN 'gsearch_nonbrand'
        WHEN website_sessions.utm_source LIKE 'bsearch' AND website_sessions.utm_campaign LIKE 'nonbrand' THEN 'bsearch_nonbrand'
        WHEN website_sessions.utm_campaign LIKE 'brand' THEN 'brand_search_overall'
        WHEN website_sessions.http_referer IS NOT NULL AND website_sessions.utm_source IS NULL THEN 'organic_search'
        WHEN website_sessions.http_referer IS NULL THEN 'direct_type_in' ELSE 'others' END AS Channel_types,
        COUNT(orders.order_id) AS orders
        FROM website_sessions
        JOIN orders ON website_sessions.website_session_id = orders.website_session_id
        GROUP BY 1
        ORDER BY 2 DESC;
-- The sessions in paid brand is ineffective in overall because we have already bid down in the the beginning of the launch


WITH cte AS (SELECT 
		website_sessions.website_session_id,
        website_sessions.created_at,
        CASE WHEN website_sessions.utm_source LIKE 'gsearch' AND website_sessions.utm_campaign LIKE 'nonbrand' THEN 'gsearch_nonbrand'
        WHEN website_sessions.utm_source LIKE 'bsearch' AND website_sessions.utm_campaign LIKE 'nonbrand' THEN 'bsearch_nonbrand'
        WHEN website_sessions.utm_campaign LIKE 'brand' THEN 'brand_search_overall'
        WHEN website_sessions.http_referer IS NOT NULL AND website_sessions.utm_source IS NULL THEN 'organic_search'
        WHEN website_sessions.http_referer IS NULL THEN 'direct_type_in' ELSE 'others' END AS channel_types
        FROM website_sessions)
        SELECT YEAR(cte.created_at) AS `YEAR`,
				QUARTER(cte.created_at) AS `QUARTER`,
                COUNT(DISTINCT CASE WHEN cte.channel_types = 'gsearch_nonbrand' THEN orders.order_id END)/COUNT(DISTINCT CASE WHEN cte.channel_types = 'gsearch_nonbrand' THEN cte.website_session_id END) AS gsearch_nonbrand_cr,
                COUNT(DISTINCT CASE WHEN cte.channel_types = 'bsearch_nonbrand' THEN orders.order_id END)/COUNT(DISTINCT CASE WHEN cte.channel_types = 'bsearch_nonbrand' THEN cte.website_session_id END) AS bsearch_nonbrand_cr,
                COUNT(DISTINCT CASE WHEN cte.channel_types = 'brand_search_overall' THEN orders.order_id END)/COUNT(DISTINCT CASE WHEN cte.channel_types = 'brand_search_overall' THEN cte.website_session_id END) AS brand_search_overall_cr,
                COUNT(DISTINCT CASE WHEN cte.channel_types = 'organic_search' THEN orders.order_id END)/COUNT(DISTINCT CASE WHEN cte.channel_types = 'organic_search' THEN cte.website_session_id END) AS organic_search_cr,
                COUNT(DISTINCT CASE WHEN cte.channel_types = 'direct_type_in' THEN orders.order_id END)/COUNT(DISTINCT CASE WHEN cte.channel_types = 'direct_type_in' THEN cte.website_session_id END) AS direct_type_in_cr,
                COUNT(DISTINCT CASE WHEN cte.channel_types = 'others' THEN orders.order_id END)/COUNT(DISTINCT CASE WHEN cte.channel_types = 'others' THEN cte.website_session_id END) AS others_cr FROM cte
			LEFT JOIN orders ON cte.website_session_id = orders.website_session_id
            GROUP BY 1,2;
-- Quarter 4, 2012 we made major improvement on conversion_rates. every_channel is increasing 32% in avg


SELECT
		YEAR(created_at) AS `YEAR`,
        MONTH(created_at) AS `MONTH`,
        SUM(CASE WHEN product_id = 1 THEN price_usd END) AS revenue_p1,
        SUM(CASE WHEN product_id = 2 THEN price_usd END) AS revenue_p2,
        SUM(CASE WHEN product_id = 3 THEN price_usd END) AS revenue_p3,
		SUM(CASE WHEN product_id = 4 THEN price_usd END) AS revenue_p4,
		SUM(CASE WHEN product_id = 1 THEN price_usd-cogs_usd END) AS margin_p1,
        SUM(CASE WHEN product_id = 2 THEN price_usd-cogs_usd END) AS margin_p2,
        SUM(CASE WHEN product_id = 3 THEN price_usd-cogs_usd END) AS margin_p3,
        SUM(CASE WHEN product_id = 4 THEN price_usd-cogs_usd END) AS margin_p4,
        COUNT(DISTINCT order_id) AS sales,
        SUM(price_usd) AS total_revenue FROM order_items
        GROUP BY 1,2;
        -- The trend pattern is picking up from month 1 to month 12. Every end of the year, the sales is going to increase AS P1,p2 increase at month 2 and month 12,...


CREATE TEMPORARY TABLE table_after_products_page
With cte AS (SELECT
		website_pageviews.website_session_id,
        website_pageviews.website_pageview_id,
        website_pageviews.pageview_url FROM website_pageviews
        WHERE pageview_url IN ('/products'))
        SELECT cte.website_session_id,
				website_pageviews.website_pageview_id,
                website_pageviews.pageview_url 
				FROM cte
                LEFT JOIN website_pageviews
                ON cte.website_session_id = website_pageviews.website_session_id AND website_pageviews.website_pageview_id > cte.website_pageview_id;

CREATE TEMPORARY TABLE table_with_flagged
SELECT 
		website_session_id,
        MAX(mrfuzzy_page) AS to_fuzzy,
        MAX(lovebear_page) AS to_lovebear,
        MAX(birthbear_page) AS to_birthbear,
        MAX(minibear_page) AS to_minibear,
        MAX(cart_page) AS to_cart,
        MAX(shipping_page) AS to_shipping,
        MAX(billing_page) AS to_billing,
        MAX(billing_2_page) AS to_billing_2,
        MAX(thankyou_page) AS to_thankyou FROM
(SELECT 
		website_session_id,
        CASE WHEN lower(pageview_url) LIKE '/the-original-mr-fuzzy' THEN 1 ELSE 0 END AS mrfuzzy_page,
        CASE WHEN lower(pageview_url) LIKE '/the-forever-love-bear' THEN 1 ELSE 0 END AS lovebear_page,
        CASE WHEN lower(pageview_url) LIKE '/the-birthday-sugar-panda' THEN 1 ELSE 0 END AS birthbear_page,
        CASE WHEN lower(pageview_url) LIKE '/the-hudson-river-mini-bear' THEN 1 ELSE 0 END AS minibear_page,
        CASE WHEN lower(pageview_url) LIKE '/cart' THEN 1 ELSE 0 END AS cart_page,
        CASE WHEN lower(pageview_url) LIKE '/shipping' THEN 1 ELSE 0 END AS shipping_page,
        CASE WHEN lower(pageview_url) LIKE '/billing' THEN 1 ELSE 0 END AS billing_page,
        CASE WHEN lower(pageview_url) LIKE '/billing-2' THEN 1 ELSE 0 END AS billing_2_page,
        CASE WHEN lower(pageview_url) LIKE '/thank-you-for-your-order' THEN 1 ELSE 0 END AS thankyou_page FROM table_after_products_page) int_table
        GROUP BY 1;


SELECT 
		YEAR(website_sessions.created_at) AS `YEAR`,
        MONTH(website_sessions.created_at) AS `MONTH`,
        COUNT(DISTINCT table_with_flagged.website_session_id) AS product_sessions,
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_fuzzy = 1 THEN table_with_flagged.website_session_id END) AS fuzzy_sessions,
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_lovebear = 1 THEN table_with_flagged.website_session_id END) AS lovebear_sessions,
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_birthbear = 1 THEN table_with_flagged.website_session_id END) AS birthbear_sessions,
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_minibear = 1 THEN table_with_flagged.website_session_id END) AS minibear_sessions,
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_cart = 1 THEN table_with_flagged.website_session_id END) AS cart_sessions,
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_shipping = 1 THEN table_with_flagged.website_session_id END) AS shipping_sessions,
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_billing = 1 THEN table_with_flagged.website_session_id END) AS billing_sessions,
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_billing_2 = 1 THEN table_with_flagged.website_session_id END) AS billing_2_sessions,
		COUNT(DISTINCT CASE WHEN table_with_flagged.to_thankyou = 1 THEN table_with_flagged.website_session_id END) AS thankyou_sessions FROM table_with_flagged
        LEFT JOIN website_sessions ON table_with_flagged.website_session_id = website_sessions.website_session_id
        GROUP BY 1,2
        ORDER BY 1,2;
        
SELECT 
		YEAR(website_sessions.created_at) AS `YEAR`,
        MONTH(website_sessions.created_at) AS `MONTH`,
        COUNT(DISTINCT table_with_flagged.website_session_id) AS product_sessions,
        (COUNT(DISTINCT CASE WHEN table_with_flagged.to_fuzzy = 1 THEN table_with_flagged.website_session_id END)+ 
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_lovebear = 1 THEN table_with_flagged.website_session_id END)+
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_birthbear = 1 THEN table_with_flagge
d.website_session_id END)+
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_minibear = 1 THEN table_with_flagged.website_session_id END))/COUNT(DISTINCT table_with_flagged.website_session_id) AS product_detailed_clickthr,
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_cart = 1 THEN table_with_flagged.website_session_id END)/(COUNT(DISTINCT CASE WHEN table_with_flagged.to_fuzzy = 1 THEN table_with_flagged.website_session_id END)+ 
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_lovebear = 1 THEN table_with_flagged.website_session_id END)+
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_birthbear = 1 THEN table_with_flagged.website_session_id END)+
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_minibear = 1 THEN table_with_flagged.website_session_id END)) AS cart_ctr,
        COUNT(DISTINCT CASE WHEN table_with_flagged.to_shipping = 1 THEN table_with_flagged.website_session_id END)/COUNT(DISTINCT CASE WHEN table_with_flagged.to_cart = 1 THEN table_with_flagged.website_session_id END) AS shipping_ctr,
        (COUNT(DISTINCT CASE WHEN table_with_flagged.to_billing = 1 THEN table_with_flagged.website_session_id END)+ COUNT(DISTINCT CASE WHEN table_with_flagged.to_billing_2 = 1 THEN table_with_flagged.website_session_id END))/COUNT(DISTINCT CASE WHEN table_with_flagged.to_shipping = 1 THEN table_with_flagged.website_session_id END) AS billing_ctr,
		COUNT(DISTINCT CASE WHEN table_with_flagged.to_thankyou = 1 THEN table_with_flagged.website_session_id END)/(COUNT(DISTINCT CASE WHEN table_with_flagged.to_billing = 1 THEN table_with_flagged.website_session_id END)+ COUNT(DISTINCT CASE WHEN table_with_flagged.to_billing_2 = 1 THEN table_with_flagged.website_session_id END)) AS thankyou_sessions FROM table_with_flagged
        LEFT JOIN website_sessions ON table_with_flagged.website_session_id = website_sessions.website_session_id
        GROUP BY 1,2
        ORDER BY 1,2;
--


WITH cte AS (SELECT 
		orders.order_id,
        orders.primary_product_id,
        order_items.product_id,
        order_items.price_usd
        FROM orders LEFT JOIN order_items ON orders.order_id = order_items.order_id)
		SELECT primary_product_id,
        COUNT(DISTINCT CASE WHEN product_id = 1 THEN order_id END) x_selling_p1,
        COUNT(DISTINCT CASE WHEN product_id = 2 THEN order_id END) x_selling_p2,
        COUNT(DISTINCT CASE WHEN product_id = 3 THEN order_id END) x_selling_p3,
        COUNT(DISTINCT CASE WHEN product_id = 4 THEN order_id END) x_selling_p4
        FROM cte
		GROUP BY 1;

